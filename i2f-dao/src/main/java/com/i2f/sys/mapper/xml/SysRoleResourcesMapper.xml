<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.i2f.sys.mapper.SysRoleResourcesMapper">
    <!--
    * @author Ice2Faith
    * @date 2023-07-04 17:33:51
    * @desc sys_role_resources 角色-资源表
    -->

    <resultMap id="mapDoResultMap" type="com.i2f.sys.data.dom.SysRoleResourcesDo">
        <id property="id" column="id"/>
        <result property="roleId" column="role_id"/>
        <result property="resId" column="res_id"/>
        <result property="createTime" column="create_time"/>
        <result property="createUser" column="create_user"/>
    </resultMap>

    <resultMap id="mapVoResultMap" type="com.i2f.sys.data.vo.SysRoleResourcesVo"
               extends="mapDoResultMap">
    </resultMap>

    <sql id="columnsAsCamel">
          a.id
         ,a.role_id as roleId
         ,a.res_id as resId
         ,a.create_time as createTime
         ,a.create_user as createUser
    </sql>

    <sql id="columnDescAsCamel">
    </sql>

    <sql id="baseQueryBody">
        select
               a.id
              ,a.role_id
              ,a.res_id
              ,a.create_time
              ,a.create_user
        from sys_role_resources a
    </sql>

    <sql id="baseQuery">
        <include refid="baseQueryBody"></include>
        <where>
            <if test="post.id!=null">
                and a.id = #{post.id}
            </if>
            <if test="post.roleId!=null">
                and a.role_id = #{post.roleId}
            </if>
            <if test="post.resId!=null">
                and a.res_id = #{post.resId}
            </if>
            <if test="post.createTime!=null">
                and a.create_time = #{post.createTime}
            </if>
            <if test="post.createUser!=null and post.createUser!=''">
                and instr(a.create_user,#{post.createUser}) &gt; 0
            </if>
        </where>
    </sql>

    <select id="page" resultMap="mapVoResultMap">
        <include refid="baseQuery"></include>
    </select>

    <select id="list" resultMap="mapVoResultMap">
        <include refid="baseQuery"></include>
    </select>

    <select id="findByPk" resultMap="mapVoResultMap">
        <include refid="baseQueryBody"></include>
        where a.id = #{id}
    </select>

    <insert id="insertSelective">
        insert into sys_role_resources
        (
        <trim suffixOverrides="," prefixOverrides=",">
            <if test="post.id!=null">
                id,
            </if>
            <if test="post.roleId!=null">
                role_id,
            </if>
            <if test="post.resId!=null">
                res_id,
            </if>
            <if test="post.createTime!=null">
                create_time,
            </if>
            <if test="post.createUser!=null and post.createUser!=''">
                create_user,
            </if>
        </trim>
        )
        values
        (
        <trim suffixOverrides="," prefixOverrides=",">
            <if test="post.id!=null">
                #{post.id},
            </if>
            <if test="post.roleId!=null">
                #{post.roleId},
            </if>
            <if test="post.resId!=null">
                #{post.resId},
            </if>
            <if test="post.createTime!=null">
                #{post.createTime},
            </if>
            <if test="post.createUser!=null and post.createUser!=''">
                #{post.createUser},
            </if>
        </trim>
        )
    </insert>

    <update id="updateSelectiveByPk">
        update sys_role_resources
        <set>
            <if test="post.id!=null">
                id = #{post.id},
            </if>
            <if test="post.roleId!=null">
                role_id = #{post.roleId},
            </if>
            <if test="post.resId!=null">
                res_id = #{post.resId},
            </if>
            <if test="post.createTime!=null">
                create_time = #{post.createTime},
            </if>
            <if test="post.createUser!=null and post.createUser!=''">
                create_user = #{post.createUser},
            </if>
        </set>
        where id = #{post.id}
    </update>

    <delete id="deleteByPk">
        delete from sys_role_resources
        where id = #{id}
    </delete>

    <insert id="insert">
        insert into sys_role_resources
        (
                    id
             ,role_id
             ,res_id
             ,create_time
             ,create_user
                            )
        values
        (
                    #{post.id}
             ,#{post.roleId}
             ,#{post.resId}
             ,#{post.createTime}
             ,#{post.createUser}
                            )
    </insert>

    <update id="updateByPk">
        update sys_role_resources
        <set>
            id = #{post.id},
            role_id = #{post.roleId},
            res_id = #{post.resId},
            create_time = #{post.createTime},
            create_user = #{post.createUser},
        </set>
        where id = #{post.id}
    </update>

    <delete id="deleteSelective">
        delete from sys_role_resources
        where
        <trim suffixOverrides="and|or" prefixOverrides="and|or">
            <if test="post.id!=null">
                and id = #{post.id}
            </if>
            <if test="post.roleId!=null">
                and role_id = #{post.roleId}
            </if>
            <if test="post.resId!=null">
                and res_id = #{post.resId}
            </if>
            <if test="post.createTime!=null">
                and create_time = #{post.createTime}
            </if>
            <if test="post.createUser!=null and post.createUser!=''">
                and instr(create_user,#{post.createUser}) &gt; 0
            </if>
        </trim>
    </delete>

    <delete id="deleteByResId">
        delete from sys_role_resources
        where res_id=#{resId}
    </delete>
    <delete id="deleteRoleResources">
        delete from sys_role_resources
        where role_id=#{roleId}
    </delete>

    <update id="grantAllResourcesByRoleId">
        insert into sys_role_resources
        (role_id,res_id,create_user,create_time)

        select
        b.id as role_id,a.id as res_id,
        'sys' as create_user,now() as create_time
        from sys_resources a,
        (
            select id from sys_role
            where id = #{roleId}
        ) b
        where not exists (
            select 1 from sys_role_resources m
            where m.role_id=b.id
            and m.res_id=a.id
        )
    </update>

    <update id="grantAllResourcesByRoleKey">
        insert into sys_role_resources
        (role_id,res_id,create_user,create_time)

        select
        b.id as role_id,a.id as res_id,
        'sys' as create_user,now() as create_time
        from sys_resources a,
        (
            select id from sys_role
            where role_key = #{roleKey}
        ) b
        where not exists (
            select 1 from sys_role_resources m
            where m.role_id=b.id
            and m.res_id=a.id
        )
    </update>

    <update id="grantLikeResourcesByRoleId">
        insert into sys_role_resources
        (role_id,res_id,create_user,create_time)

        select b.id as role_id,a.res_id
        from (
            select a.res_id
            from sys_role_resources a
            left join sys_role b on a.role_id =b.id
            where b.id = #{fromRoleId}
        ) a,
        (
            select id from sys_role
            where id = #{toRoleId}
        ) b
        where not exists (
            select 1 from sys_role_resources m
            where m.role_id=b.id
            and m.res_id=a.res_id
        )
    </update>

    <update id="grantLikeResourcesByRoleKey">
        insert into sys_role_resources
        (role_id,res_id,create_user,create_time)

        select b.id as role_id,a.res_id
        from (
            select a.res_id
            from sys_role_resources a
            left join sys_role b on a.role_id =b.id
            where b.role_key = #{fromRoleKey}
        ) a,
        (
            select id from sys_role
            where role_key = #{toRoleKey}
        ) b
        where not exists (
            select 1 from sys_role_resources m
            where m.role_id=b.id
            and m.res_id=a.res_id
        )
    </update>


    <insert id="insertBatch">
        insert into sys_role_resources
        (
        id
        ,role_id
        ,res_id
        ,create_time
        ,create_user
        )
        values
        <foreach collection="list" item="item" separator=",">
            (
            #{item.id}
            ,#{item.roleId}
            ,#{item.resId}
            ,#{item.createTime}
            ,#{item.createUser}
            )
        </foreach>

    </insert>
</mapper>